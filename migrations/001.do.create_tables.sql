-- DROP the tables and constraints
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS mentors;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS channels;
DROP TABLE IF EXISTS user_followers;
DROP TABLE IF EXISTS channel_members;
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS mentees;

-- create the users table, it depends on no other
CREATE TABLE users (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  username VARCHAR(15) NOT NULL,
  email TEXT NOT NULL,
  password varchar NOT NULL
);

-- create the mentors table with the foreign key
CREATE TABLE mentors (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  username VARCHAR(15) NOT NULL,
  email TEXT NOT NULL,
  primaryUserID INTEGER REFERENCES users(id) ON DELETE CASCADE
);

-- create the mentees table with the foreign key
CREATE TABLE mentees (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  userID INTEGER REFERENCES users(id) ON DELETE CASCADE,
  mentorID INTEGER REFERENCES mentors(id) ON DELETE CASCADE
);

-- create the posts table with the foreign key
CREATE TABLE posts (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  userID INTEGER REFERENCES users(id) ON DELETE CASCADE,
  post VARCHAR(140) NOT NULL,
  posted TIMESTAMP DEFAULT NOW()
);

-- create the comments table with the foreign key
CREATE TABLE comments (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  userID INTEGER REFERENCES users(id) ON DELETE CASCADE,
  postID INTEGER REFERENCES posts(id) ON DELETE CASCADE,
  comment VARCHAR(140) NOT NULL,
  posted TIMESTAMP DEFAULT NOW()
);

-- create the channels table with the foreign key
CREATE TABLE channels (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  channel_name VARCHAR(15) NOT NULL
);

-- create the channel_members table with the foreign key
CREATE TABLE channel_members (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  channelID INTEGER REFERENCES channels (id) ON DELETE CASCADE,
  userID INTEGER REFERENCES users(id) ON DELETE CASCADE
);


-- create the user_followers table with the foreign key
CREATE TABLE user_followers (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  userID INTEGER REFERENCES users(id) ON DELETE CASCADE,
  followerID INTEGER REFERENCES users(id) ON DELETE CASCADE
);

-- create the messages table with the foreign key
CREATE TABLE messages (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  userID INTEGER REFERENCES users(id) ON DELETE CASCADE,
  channelID INTEGER REFERENCES channels(id) ON DELETE CASCADE,
  messages VARCHAR NOT NULL,
  posted TIMESTAMP DEFAULT NOW()
);


